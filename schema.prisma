// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource sqlite {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "sqlite"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model Service {
  id       String    @id @default(cuid())
  title    String    @default("")
  slug     String    @unique @default("")
  content  String    @default("")
  tag      String    @default("")
  author   User?     @relation("Service_author", fields: [authorId], references: [id])
  authorId String?   @map("author")
  editedOn DateTime?

  @@index([authorId])
}

model Team {
  id               String    @id @default(cuid())
  slug             String    @unique @default("")
  postion          String    @default("")
  name             String    @default("")
  content          String    @default("")
  avatar_filesize  Int?
  avatar_extension String?
  avatar_width     Int?
  avatar_height    Int?
  avatar_id        String?
  author           User?     @relation("Team_author", fields: [authorId], references: [id])
  authorId         String?   @map("author")
  editedOn         DateTime?

  @@index([authorId])
}

model Product {
  id       String    @id @default(cuid())
  title    String    @default("")
  slug     String    @unique @default("")
  content  String    @default("")
  tag      String    @default("")
  author   User?     @relation("Product_author", fields: [authorId], references: [id])
  authorId String?   @map("author")
  editedOn DateTime?

  @@index([authorId])
}

model Solution {
  id       String    @id @default(cuid())
  title    String    @default("")
  slug     String    @unique @default("")
  content  String    @default("")
  tag      String    @default("")
  author   User?     @relation("Solution_author", fields: [authorId], references: [id])
  authorId String?   @map("author")
  editedOn DateTime?

  @@index([authorId])
}

model User {
  id                     String       @id @default(cuid())
  email                  String       @default("")
  name                   String       @unique @default("")
  password               String?
  isAdmin                Boolean      @default(false)
  from_Service_author    Service[]    @relation("Service_author")
  from_Team_author       Team[]       @relation("Team_author")
  from_Product_author    Product[]    @relation("Product_author")
  from_Solution_author   Solution[]   @relation("Solution_author")
  from_Home_author       Home[]       @relation("Home_author")
  from_Nav_author        Nav[]        @relation("Nav_author")
  from_Foot_author       Foot[]       @relation("Foot_author")
  from_About_author      About[]      @relation("About_author")
  from_WhatWeDo_author   WhatWeDo[]   @relation("WhatWeDo_author")
  from_Technology_author Technology[] @relation("Technology_author")
  from_Career_author     Career[]     @relation("Career_author")
  from_Contact_author    Contact[]    @relation("Contact_author")
  from_Error_author      Error[]      @relation("Error_author")
}

model Home {
  id       String    @id @default(cuid())
  slug     String    @unique @default("")
  content  String    @default("")
  tag      String    @default("")
  author   User?     @relation("Home_author", fields: [authorId], references: [id])
  authorId String?   @map("author")
  editedOn DateTime?

  @@index([authorId])
}

model Nav {
  id       String    @id @default(cuid())
  slug     String    @unique @default("")
  content  String    @default("")
  author   User?     @relation("Nav_author", fields: [authorId], references: [id])
  authorId String?   @map("author")
  editedOn DateTime?

  @@index([authorId])
}

model Foot {
  id       String    @id @default(cuid())
  slug     String    @unique @default("")
  content  String    @default("")
  author   User?     @relation("Foot_author", fields: [authorId], references: [id])
  authorId String?   @map("author")
  editedOn DateTime?

  @@index([authorId])
}

model About {
  id       String    @id @default(cuid())
  slug     String    @unique @default("")
  content  String    @default("")
  tag      String    @default("")
  author   User?     @relation("About_author", fields: [authorId], references: [id])
  authorId String?   @map("author")
  editedOn DateTime?

  @@index([authorId])
}

model WhatWeDo {
  id       String    @id @default(cuid())
  slug     String    @unique @default("")
  content  String    @default("")
  tag      String    @default("")
  author   User?     @relation("WhatWeDo_author", fields: [authorId], references: [id])
  authorId String?   @map("author")
  editedOn DateTime?

  @@index([authorId])
}

model Technology {
  id       String    @id @default(cuid())
  title    String    @default("")
  slug     String    @unique @default("")
  content  String    @default("")
  tag      String    @default("")
  author   User?     @relation("Technology_author", fields: [authorId], references: [id])
  authorId String?   @map("author")
  editedOn DateTime?

  @@index([authorId])
}

model Career {
  id       String    @id @default(cuid())
  slug     String    @unique @default("")
  content  String    @default("")
  tag      String    @default("")
  author   User?     @relation("Career_author", fields: [authorId], references: [id])
  authorId String?   @map("author")
  editedOn DateTime?

  @@index([authorId])
}

model Contact {
  id       String    @id @default(cuid())
  slug     String    @unique @default("")
  content  String    @default("")
  tag      String    @default("")
  author   User?     @relation("Contact_author", fields: [authorId], references: [id])
  authorId String?   @map("author")
  editedOn DateTime?

  @@index([authorId])
}

model Error {
  id       String    @id @default(cuid())
  slug     String    @unique @default("")
  content  String    @default("")
  tag      String    @default("")
  author   User?     @relation("Error_author", fields: [authorId], references: [id])
  authorId String?   @map("author")
  editedOn DateTime?

  @@index([authorId])
}