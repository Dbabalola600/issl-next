# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Service {
  id: ID!
  title: String
  slug: String
  content: String
  tag: String
  author: User
  editedOn: DateTime
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ServiceWhereUniqueInput {
  id: ID
  slug: String
}

input ServiceWhereInput {
  AND: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  NOT: [ServiceWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  content: StringFilter
  tag: StringFilter
  author: UserWhereInput
  editedOn: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input ServiceOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  content: OrderDirection
  tag: OrderDirection
  editedOn: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ServiceUpdateInput {
  title: String
  slug: String
  content: String
  tag: String
  author: UserRelateToOneForUpdateInput
  editedOn: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input ServiceUpdateArgs {
  where: ServiceWhereUniqueInput!
  data: ServiceUpdateInput!
}

input ServiceCreateInput {
  title: String
  slug: String
  content: String
  tag: String
  author: UserRelateToOneForCreateInput
  editedOn: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Team {
  id: ID!
  slug: String
  postion: String
  name: String
  content: String
  avatar: ImageFieldOutput
  author: User
  editedOn: DateTime
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input TeamWhereUniqueInput {
  id: ID
  slug: String
}

input TeamWhereInput {
  AND: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
  id: IDFilter
  slug: StringFilter
  postion: StringFilter
  name: StringFilter
  content: StringFilter
  author: UserWhereInput
  editedOn: DateTimeNullableFilter
}

input TeamOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  postion: OrderDirection
  name: OrderDirection
  content: OrderDirection
  editedOn: OrderDirection
}

input TeamUpdateInput {
  slug: String
  postion: String
  name: String
  content: String
  avatar: ImageFieldInput
  author: UserRelateToOneForUpdateInput
  editedOn: DateTime
}

input ImageFieldInput {
  upload: Upload!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input TeamUpdateArgs {
  where: TeamWhereUniqueInput!
  data: TeamUpdateInput!
}

input TeamCreateInput {
  slug: String
  postion: String
  name: String
  content: String
  avatar: ImageFieldInput
  author: UserRelateToOneForCreateInput
  editedOn: DateTime
}

type Product {
  id: ID!
  title: String
  slug: String
  content: String
  tag: String
  author: User
  editedOn: DateTime
}

input ProductWhereUniqueInput {
  id: ID
  slug: String
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  content: StringFilter
  tag: StringFilter
  author: UserWhereInput
  editedOn: DateTimeNullableFilter
}

input ProductOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  content: OrderDirection
  tag: OrderDirection
  editedOn: OrderDirection
}

input ProductUpdateInput {
  title: String
  slug: String
  content: String
  tag: String
  author: UserRelateToOneForUpdateInput
  editedOn: DateTime
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  title: String
  slug: String
  content: String
  tag: String
  author: UserRelateToOneForCreateInput
  editedOn: DateTime
}

type Solution {
  id: ID!
  title: String
  slug: String
  content: String
  tag: String
  author: User
  editedOn: DateTime
}

input SolutionWhereUniqueInput {
  id: ID
  slug: String
}

input SolutionWhereInput {
  AND: [SolutionWhereInput!]
  OR: [SolutionWhereInput!]
  NOT: [SolutionWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  content: StringFilter
  tag: StringFilter
  author: UserWhereInput
  editedOn: DateTimeNullableFilter
}

input SolutionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  content: OrderDirection
  tag: OrderDirection
  editedOn: OrderDirection
}

input SolutionUpdateInput {
  title: String
  slug: String
  content: String
  tag: String
  author: UserRelateToOneForUpdateInput
  editedOn: DateTime
}

input SolutionUpdateArgs {
  where: SolutionWhereUniqueInput!
  data: SolutionUpdateInput!
}

input SolutionCreateInput {
  title: String
  slug: String
  content: String
  tag: String
  author: UserRelateToOneForCreateInput
  editedOn: DateTime
}

type User {
  id: ID!
  email: String
  name: String
  password: PasswordState
  isAdmin: Boolean
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  name: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  email: StringFilter
  name: StringFilter
  password: PasswordFilter
  isAdmin: BooleanFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  email: OrderDirection
  name: OrderDirection
  isAdmin: OrderDirection
}

input UserUpdateInput {
  email: String
  name: String
  password: String
  isAdmin: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  email: String
  name: String
  password: String
  isAdmin: Boolean
}

type Home {
  id: ID!
  slug: String
  content: String
  tag: String
  author: User
  editedOn: DateTime
}

input HomeWhereUniqueInput {
  id: ID
  slug: String
}

input HomeWhereInput {
  AND: [HomeWhereInput!]
  OR: [HomeWhereInput!]
  NOT: [HomeWhereInput!]
  id: IDFilter
  slug: StringFilter
  content: StringFilter
  tag: StringFilter
  author: UserWhereInput
  editedOn: DateTimeNullableFilter
}

input HomeOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  content: OrderDirection
  tag: OrderDirection
  editedOn: OrderDirection
}

input HomeUpdateInput {
  slug: String
  content: String
  tag: String
  author: UserRelateToOneForUpdateInput
  editedOn: DateTime
}

input HomeUpdateArgs {
  where: HomeWhereUniqueInput!
  data: HomeUpdateInput!
}

input HomeCreateInput {
  slug: String
  content: String
  tag: String
  author: UserRelateToOneForCreateInput
  editedOn: DateTime
}

type Nav {
  id: ID!
  slug: String
  content: String
  author: User
  editedOn: DateTime
}

input NavWhereUniqueInput {
  id: ID
  slug: String
}

input NavWhereInput {
  AND: [NavWhereInput!]
  OR: [NavWhereInput!]
  NOT: [NavWhereInput!]
  id: IDFilter
  slug: StringFilter
  content: StringFilter
  author: UserWhereInput
  editedOn: DateTimeNullableFilter
}

input NavOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  content: OrderDirection
  editedOn: OrderDirection
}

input NavUpdateInput {
  slug: String
  content: String
  author: UserRelateToOneForUpdateInput
  editedOn: DateTime
}

input NavUpdateArgs {
  where: NavWhereUniqueInput!
  data: NavUpdateInput!
}

input NavCreateInput {
  slug: String
  content: String
  author: UserRelateToOneForCreateInput
  editedOn: DateTime
}

type Foot {
  id: ID!
  slug: String
  content: String
  author: User
  editedOn: DateTime
}

input FootWhereUniqueInput {
  id: ID
  slug: String
}

input FootWhereInput {
  AND: [FootWhereInput!]
  OR: [FootWhereInput!]
  NOT: [FootWhereInput!]
  id: IDFilter
  slug: StringFilter
  content: StringFilter
  author: UserWhereInput
  editedOn: DateTimeNullableFilter
}

input FootOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  content: OrderDirection
  editedOn: OrderDirection
}

input FootUpdateInput {
  slug: String
  content: String
  author: UserRelateToOneForUpdateInput
  editedOn: DateTime
}

input FootUpdateArgs {
  where: FootWhereUniqueInput!
  data: FootUpdateInput!
}

input FootCreateInput {
  slug: String
  content: String
  author: UserRelateToOneForCreateInput
  editedOn: DateTime
}

type About {
  id: ID!
  slug: String
  content: String
  tag: String
  author: User
  editedOn: DateTime
}

input AboutWhereUniqueInput {
  id: ID
  slug: String
}

input AboutWhereInput {
  AND: [AboutWhereInput!]
  OR: [AboutWhereInput!]
  NOT: [AboutWhereInput!]
  id: IDFilter
  slug: StringFilter
  content: StringFilter
  tag: StringFilter
  author: UserWhereInput
  editedOn: DateTimeNullableFilter
}

input AboutOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  content: OrderDirection
  tag: OrderDirection
  editedOn: OrderDirection
}

input AboutUpdateInput {
  slug: String
  content: String
  tag: String
  author: UserRelateToOneForUpdateInput
  editedOn: DateTime
}

input AboutUpdateArgs {
  where: AboutWhereUniqueInput!
  data: AboutUpdateInput!
}

input AboutCreateInput {
  slug: String
  content: String
  tag: String
  author: UserRelateToOneForCreateInput
  editedOn: DateTime
}

type WhatWeDo {
  id: ID!
  slug: String
  content: String
  tag: String
  author: User
  editedOn: DateTime
}

input WhatWeDoWhereUniqueInput {
  id: ID
  slug: String
}

input WhatWeDoWhereInput {
  AND: [WhatWeDoWhereInput!]
  OR: [WhatWeDoWhereInput!]
  NOT: [WhatWeDoWhereInput!]
  id: IDFilter
  slug: StringFilter
  content: StringFilter
  tag: StringFilter
  author: UserWhereInput
  editedOn: DateTimeNullableFilter
}

input WhatWeDoOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  content: OrderDirection
  tag: OrderDirection
  editedOn: OrderDirection
}

input WhatWeDoUpdateInput {
  slug: String
  content: String
  tag: String
  author: UserRelateToOneForUpdateInput
  editedOn: DateTime
}

input WhatWeDoUpdateArgs {
  where: WhatWeDoWhereUniqueInput!
  data: WhatWeDoUpdateInput!
}

input WhatWeDoCreateInput {
  slug: String
  content: String
  tag: String
  author: UserRelateToOneForCreateInput
  editedOn: DateTime
}

type Technology {
  id: ID!
  title: String
  slug: String
  content: String
  tag: String
  author: User
  editedOn: DateTime
}

input TechnologyWhereUniqueInput {
  id: ID
  slug: String
}

input TechnologyWhereInput {
  AND: [TechnologyWhereInput!]
  OR: [TechnologyWhereInput!]
  NOT: [TechnologyWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  content: StringFilter
  tag: StringFilter
  author: UserWhereInput
  editedOn: DateTimeNullableFilter
}

input TechnologyOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  content: OrderDirection
  tag: OrderDirection
  editedOn: OrderDirection
}

input TechnologyUpdateInput {
  title: String
  slug: String
  content: String
  tag: String
  author: UserRelateToOneForUpdateInput
  editedOn: DateTime
}

input TechnologyUpdateArgs {
  where: TechnologyWhereUniqueInput!
  data: TechnologyUpdateInput!
}

input TechnologyCreateInput {
  title: String
  slug: String
  content: String
  tag: String
  author: UserRelateToOneForCreateInput
  editedOn: DateTime
}

type Career {
  id: ID!
  slug: String
  content: String
  tag: String
  author: User
  editedOn: DateTime
}

input CareerWhereUniqueInput {
  id: ID
  slug: String
}

input CareerWhereInput {
  AND: [CareerWhereInput!]
  OR: [CareerWhereInput!]
  NOT: [CareerWhereInput!]
  id: IDFilter
  slug: StringFilter
  content: StringFilter
  tag: StringFilter
  author: UserWhereInput
  editedOn: DateTimeNullableFilter
}

input CareerOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  content: OrderDirection
  tag: OrderDirection
  editedOn: OrderDirection
}

input CareerUpdateInput {
  slug: String
  content: String
  tag: String
  author: UserRelateToOneForUpdateInput
  editedOn: DateTime
}

input CareerUpdateArgs {
  where: CareerWhereUniqueInput!
  data: CareerUpdateInput!
}

input CareerCreateInput {
  slug: String
  content: String
  tag: String
  author: UserRelateToOneForCreateInput
  editedOn: DateTime
}

type Contact {
  id: ID!
  slug: String
  content: String
  tag: String
  author: User
  editedOn: DateTime
}

input ContactWhereUniqueInput {
  id: ID
  slug: String
}

input ContactWhereInput {
  AND: [ContactWhereInput!]
  OR: [ContactWhereInput!]
  NOT: [ContactWhereInput!]
  id: IDFilter
  slug: StringFilter
  content: StringFilter
  tag: StringFilter
  author: UserWhereInput
  editedOn: DateTimeNullableFilter
}

input ContactOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  content: OrderDirection
  tag: OrderDirection
  editedOn: OrderDirection
}

input ContactUpdateInput {
  slug: String
  content: String
  tag: String
  author: UserRelateToOneForUpdateInput
  editedOn: DateTime
}

input ContactUpdateArgs {
  where: ContactWhereUniqueInput!
  data: ContactUpdateInput!
}

input ContactCreateInput {
  slug: String
  content: String
  tag: String
  author: UserRelateToOneForCreateInput
  editedOn: DateTime
}

type Error {
  id: ID!
  slug: String
  content: String
  tag: String
  author: User
  editedOn: DateTime
}

input ErrorWhereUniqueInput {
  id: ID
  slug: String
}

input ErrorWhereInput {
  AND: [ErrorWhereInput!]
  OR: [ErrorWhereInput!]
  NOT: [ErrorWhereInput!]
  id: IDFilter
  slug: StringFilter
  content: StringFilter
  tag: StringFilter
  author: UserWhereInput
  editedOn: DateTimeNullableFilter
}

input ErrorOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  content: OrderDirection
  tag: OrderDirection
  editedOn: OrderDirection
}

input ErrorUpdateInput {
  slug: String
  content: String
  tag: String
  author: UserRelateToOneForUpdateInput
  editedOn: DateTime
}

input ErrorUpdateArgs {
  where: ErrorWhereUniqueInput!
  data: ErrorUpdateInput!
}

input ErrorCreateInput {
  slug: String
  content: String
  tag: String
  author: UserRelateToOneForCreateInput
  editedOn: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createService(data: ServiceCreateInput!): Service
  createServices(data: [ServiceCreateInput!]!): [Service]
  updateService(
    where: ServiceWhereUniqueInput!
    data: ServiceUpdateInput!
  ): Service
  updateServices(data: [ServiceUpdateArgs!]!): [Service]
  deleteService(where: ServiceWhereUniqueInput!): Service
  deleteServices(where: [ServiceWhereUniqueInput!]!): [Service]
  createTeam(data: TeamCreateInput!): Team
  createTeams(data: [TeamCreateInput!]!): [Team]
  updateTeam(where: TeamWhereUniqueInput!, data: TeamUpdateInput!): Team
  updateTeams(data: [TeamUpdateArgs!]!): [Team]
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteTeams(where: [TeamWhereUniqueInput!]!): [Team]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(
    where: ProductWhereUniqueInput!
    data: ProductUpdateInput!
  ): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createSolution(data: SolutionCreateInput!): Solution
  createSolutions(data: [SolutionCreateInput!]!): [Solution]
  updateSolution(
    where: SolutionWhereUniqueInput!
    data: SolutionUpdateInput!
  ): Solution
  updateSolutions(data: [SolutionUpdateArgs!]!): [Solution]
  deleteSolution(where: SolutionWhereUniqueInput!): Solution
  deleteSolutions(where: [SolutionWhereUniqueInput!]!): [Solution]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createHome(data: HomeCreateInput!): Home
  createHomes(data: [HomeCreateInput!]!): [Home]
  updateHome(where: HomeWhereUniqueInput!, data: HomeUpdateInput!): Home
  updateHomes(data: [HomeUpdateArgs!]!): [Home]
  deleteHome(where: HomeWhereUniqueInput!): Home
  deleteHomes(where: [HomeWhereUniqueInput!]!): [Home]
  createNav(data: NavCreateInput!): Nav
  createNavs(data: [NavCreateInput!]!): [Nav]
  updateNav(where: NavWhereUniqueInput!, data: NavUpdateInput!): Nav
  updateNavs(data: [NavUpdateArgs!]!): [Nav]
  deleteNav(where: NavWhereUniqueInput!): Nav
  deleteNavs(where: [NavWhereUniqueInput!]!): [Nav]
  createFoot(data: FootCreateInput!): Foot
  createFeet(data: [FootCreateInput!]!): [Foot]
  updateFoot(where: FootWhereUniqueInput!, data: FootUpdateInput!): Foot
  updateFeet(data: [FootUpdateArgs!]!): [Foot]
  deleteFoot(where: FootWhereUniqueInput!): Foot
  deleteFeet(where: [FootWhereUniqueInput!]!): [Foot]
  createAbout(data: AboutCreateInput!): About
  createAbouts(data: [AboutCreateInput!]!): [About]
  updateAbout(where: AboutWhereUniqueInput!, data: AboutUpdateInput!): About
  updateAbouts(data: [AboutUpdateArgs!]!): [About]
  deleteAbout(where: AboutWhereUniqueInput!): About
  deleteAbouts(where: [AboutWhereUniqueInput!]!): [About]
  createWhatWeDo(data: WhatWeDoCreateInput!): WhatWeDo
  createWhatWeDos(data: [WhatWeDoCreateInput!]!): [WhatWeDo]
  updateWhatWeDo(
    where: WhatWeDoWhereUniqueInput!
    data: WhatWeDoUpdateInput!
  ): WhatWeDo
  updateWhatWeDos(data: [WhatWeDoUpdateArgs!]!): [WhatWeDo]
  deleteWhatWeDo(where: WhatWeDoWhereUniqueInput!): WhatWeDo
  deleteWhatWeDos(where: [WhatWeDoWhereUniqueInput!]!): [WhatWeDo]
  createTechnology(data: TechnologyCreateInput!): Technology
  createTechnologies(data: [TechnologyCreateInput!]!): [Technology]
  updateTechnology(
    where: TechnologyWhereUniqueInput!
    data: TechnologyUpdateInput!
  ): Technology
  updateTechnologies(data: [TechnologyUpdateArgs!]!): [Technology]
  deleteTechnology(where: TechnologyWhereUniqueInput!): Technology
  deleteTechnologies(where: [TechnologyWhereUniqueInput!]!): [Technology]
  createCareer(data: CareerCreateInput!): Career
  createCareers(data: [CareerCreateInput!]!): [Career]
  updateCareer(where: CareerWhereUniqueInput!, data: CareerUpdateInput!): Career
  updateCareers(data: [CareerUpdateArgs!]!): [Career]
  deleteCareer(where: CareerWhereUniqueInput!): Career
  deleteCareers(where: [CareerWhereUniqueInput!]!): [Career]
  createContact(data: ContactCreateInput!): Contact
  createContacts(data: [ContactCreateInput!]!): [Contact]
  updateContact(
    where: ContactWhereUniqueInput!
    data: ContactUpdateInput!
  ): Contact
  updateContacts(data: [ContactUpdateArgs!]!): [Contact]
  deleteContact(where: ContactWhereUniqueInput!): Contact
  deleteContacts(where: [ContactWhereUniqueInput!]!): [Contact]
  createError(data: ErrorCreateInput!): Error
  createErrors(data: [ErrorCreateInput!]!): [Error]
  updateError(where: ErrorWhereUniqueInput!, data: ErrorUpdateInput!): Error
  updateErrors(data: [ErrorUpdateArgs!]!): [Error]
  deleteError(where: ErrorWhereUniqueInput!): Error
  deleteErrors(where: [ErrorWhereUniqueInput!]!): [Error]
  endSession: Boolean!
  authenticateUserWithPassword(
    name: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

type Query {
  services(
    where: ServiceWhereInput! = {}
    orderBy: [ServiceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Service!]
  service(where: ServiceWhereUniqueInput!): Service
  servicesCount(where: ServiceWhereInput! = {}): Int
  teams(
    where: TeamWhereInput! = {}
    orderBy: [TeamOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Team!]
  team(where: TeamWhereUniqueInput!): Team
  teamsCount(where: TeamWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  solutions(
    where: SolutionWhereInput! = {}
    orderBy: [SolutionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Solution!]
  solution(where: SolutionWhereUniqueInput!): Solution
  solutionsCount(where: SolutionWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  homes(
    where: HomeWhereInput! = {}
    orderBy: [HomeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Home!]
  home(where: HomeWhereUniqueInput!): Home
  homesCount(where: HomeWhereInput! = {}): Int
  navs(
    where: NavWhereInput! = {}
    orderBy: [NavOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Nav!]
  nav(where: NavWhereUniqueInput!): Nav
  navsCount(where: NavWhereInput! = {}): Int
  feet(
    where: FootWhereInput! = {}
    orderBy: [FootOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Foot!]
  foot(where: FootWhereUniqueInput!): Foot
  feetCount(where: FootWhereInput! = {}): Int
  abouts(
    where: AboutWhereInput! = {}
    orderBy: [AboutOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [About!]
  about(where: AboutWhereUniqueInput!): About
  aboutsCount(where: AboutWhereInput! = {}): Int
  whatWeDos(
    where: WhatWeDoWhereInput! = {}
    orderBy: [WhatWeDoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [WhatWeDo!]
  whatWeDo(where: WhatWeDoWhereUniqueInput!): WhatWeDo
  whatWeDosCount(where: WhatWeDoWhereInput! = {}): Int
  technologies(
    where: TechnologyWhereInput! = {}
    orderBy: [TechnologyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Technology!]
  technology(where: TechnologyWhereUniqueInput!): Technology
  technologiesCount(where: TechnologyWhereInput! = {}): Int
  careers(
    where: CareerWhereInput! = {}
    orderBy: [CareerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Career!]
  career(where: CareerWhereUniqueInput!): Career
  careersCount(where: CareerWhereInput! = {}): Int
  contacts(
    where: ContactWhereInput! = {}
    orderBy: [ContactOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Contact!]
  contact(where: ContactWhereUniqueInput!): Contact
  contactsCount(where: ContactWhereInput! = {}): Int
  errors(
    where: ErrorWhereInput! = {}
    orderBy: [ErrorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Error!]
  error(where: ErrorWhereUniqueInput!): Error
  errorsCount(where: ErrorWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
